<?xml version="1.0" encoding="UTF-8"?>
<!--
  - Main WiX source for the Rancher Desktop Installer
  -
  - This file is a Mustache template that is rendered via installer-win32.ts.
  -->
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi"
  xmlns:fire="http://schemas.microsoft.com/wix/FirewallExtension">
  <Product
    Id="*"
    Name="Rancher Desktop"
    UpgradeCode="{1F717D5A-A55B-5FE2-9103-C0D74F7FBDE3}"
    Version="{{appVersion}}"
    Language="1033"
    Codepage="65001"
    Manufacturer="SUSE">
    <Package Compressed="yes" InstallerVersion="500" />
    <!-- As of Windows 10/11, msiexec.exe is manifested for Windows 8.1 -->
    <Condition Message="Windows 10 and above is required">
      <![CDATA[ Installed OR VersionNT >= 603 ]]>
    </Condition>
    <MajorUpgrade
      AllowSameVersionUpgrades="yes"
      DowngradeErrorMessage='A newer version of [ProductName] is already installed.'
      Schedule="afterInstallInitialize" />
    <MediaTemplate CompressionLevel="high" EmbedCab="yes" />
    <UIRef Id="WixUI_RD" />

    <Property Id="ApplicationFolderName" Value="Rancher Desktop" />
    <Icon Id="RancherDesktopIcon.exe" SourceFile="$(var.iconPath)" />
    <Property Id="ARPPRODUCTICON" Value="RancherDesktopIcon.exe" />
    <Property Id="ARPNOMODIFY" Value="1" />
    <Property Id="ARPURLINFOABOUT" Value="https://rancherdesktop.io/" />

    <WixVariable Id="AppGUID" Value="358d85cc-bb94-539e-a3cd-9231b877c7a4" />

    <DirectoryRef Id="TARGETDIR" />

    <SetProperty Id="ALLUSERS" Sequence="both" After="ValidateProductID" Value="1">
      NOT WSLINSTALLED AND NOT Installed
    </SetProperty>
    <SetProperty Id="MSIINSTALLPERUSER" Sequence="first" After="ValidateProductID" Value="0">
      (NOT WSLINSTALLED OR NOT MSIINSTALLPERUSER) AND NOT Installed
    </SetProperty>

    <!-- Custom action to detect if WSL is installed -->
    <Binary Id="CustomActionBinary" SourceFile="wix-custom-action.dll" />
    <CustomAction Id="DetectWSL" BinaryKey="CustomActionBinary" DllEntry="DetectWSL"
      Execute="immediate" Return="check" />
    <!-- Custom action to update WSL -->
    <CustomAction Id="UpdateWSL" BinaryKey="CustomActionBinary" DllEntry="UpdateWSL"
      Execute="deferred" Return="check" Impersonate="yes" />
    <!-- Custom action to raise an error because WSL was not installed -->
    <CustomAction Id="ErrorWSLNotInstalled" Error="100" />

    <InstallUISequence>
      <!--
        - DetectWSL may set the WSLINSTALLED and WSLKERNELOUTDATED properties
        - depending on the state of the system.
        -->
      <Custom Action="DetectWSL" After="AppSearch">
        NOT WSLINSTALLED <!-- Skip search if user overrides -->
      </Custom>
      <Custom Action="ErrorWSLNotInstalled" After="RDWelcomeDlg">
        NOT WSLINSTALLED AND NOT Installed
      </Custom>
    </InstallUISequence>
    <InstallExecuteSequence>
      <Custom Action="DetectWSL" After="AppSearch">
        NOT WSLINSTALLED <!-- Skip search if user overrides -->
      </Custom>
      <Custom Action="ErrorWSLNotInstalled" After="LaunchConditions">
        NOT WSLINSTALLED AND NOT Installed
      </Custom>
      <Custom Action="UpdateWSL" After="InstallFiles">
        WSLINSTALLED AND WSLKERNELOUTDATED
      </Custom>
    </InstallExecuteSequence>

    <!-- Check if the NSIS-based Rancher Desktop is installed, and uninstall if yes. -->
    <Property Id="NSISUNINSTALLCOMMAND">
      <RegistrySearch
        Id="NSISInstalled"
        Root="HKCU"
        Key="Software\Microsoft\Windows\CurrentVersion\Uninstall\!(wix.AppGUID)"
        Name="QuietUninstallString"
        Type="raw" />
    </Property>
    <!--
      - We use a CustomAction with a Directory= so we have full control of the
      - execution (action type 34); a more obvious Property= (type 50) will
      - interpret the whole string as the executable (argv[0]) and fail.
      - Since this is run before anything is installed, we pick a random
      - system directory as the working directory (i.e. Directory=).
      - Note that this action *must* be run as the non-privileged user (so
      - that it will clear out the uninstall registry key).
      -->
    <CustomAction
      Id="UninstallNSIS"
      ExeCommand="[NSISUNINSTALLCOMMAND]"
      Execute="immediate"
      Impersonate="yes"
      Directory="ProgramFiles64Folder"
      Return="check"
    />
    <InstallExecuteSequence>
      <Custom Action="UninstallNSIS" After="InstallInitialize">
        NSISUNINSTALLCOMMAND AND NOT Installed
      </Custom>
    </InstallExecuteSequence>

    <!-- Setting the PATH variable -->
    <Component Id="PathUser" Directory="APPLICATIONFOLDER">
      <Condition>MSIINSTALLPERUSER = 1</Condition>
      <RegistryValue
        Root="HKCU"
        Key="SOFTWARE\!(wix.AppGUID)"
        Name="EnvironmentVariablesSet"
        Value="yes"
        Type="string"
        KeyPath="yes"
      />
      <Environment Id="PathWindowsUserBin" Name="PATH"
        Action="set" Part="last" System="no" Permanent="no"
        Value="[APPLICATIONFOLDER]resources\resources\win32\bin\" />
      <Environment Id="PathWindowsUserDockerCLIPlugins" Name="PATH"
        Action="set" Part="last" System="no" Permanent="no"
        Value="[APPLICATIONFOLDER]resources\resources\win32\docker-cli-plugins\" />
      <Environment Id="PathLinuxUserBin" Name="PATH"
        Action="set" Part="last" System="no" Permanent="no"
        Value="[APPLICATIONFOLDER]resources\resources\linux\bin\" />
      <Environment Id="PathLinuxUserDockerCLIPlugins" Name="PATH"
        Action="set" Part="last" System="no" Permanent="no"
        Value="[APPLICATIONFOLDER]resources\resources\linux\docker-cli-plugins\" />
    </Component>
    <Component Id="PathSystem" Directory="APPLICATIONFOLDER">
      <Condition>
        <![CDATA[MSIINSTALLPERUSER <> 1]]>
      </Condition>
      <RegistryValue
        Root="HKLM"
        Key="SOFTWARE\!(wix.AppGUID)"
        Name="EnvironmentVariablesSet"
        Value="yes"
        Type="string"
        KeyPath="yes"
      />
      <Environment Id="PathWindowsSystemBin" Name="PATH"
        Action="set" Part="last" System="yes" Permanent="no"
        Value="[APPLICATIONFOLDER]resources\resources\win32\bin\" />
      <Environment Id="PathWindowsSystemDockerCLIPlugins" Name="PATH"
        Action="set" Part="last" System="yes" Permanent="no"
        Value="[APPLICATIONFOLDER]resources\resources\win32\docker-cli-plugins\" />
      <Environment Id="PathLinuxSystemBin" Name="PATH"
        Action="set" Part="last" System="yes" Permanent="no"
        Value="[APPLICATIONFOLDER]resources\resources\linux\bin\" />
      <Environment Id="PathLinuxSystemDockerCLIPlugins" Name="PATH"
        Action="set" Part="last" System="yes" Permanent="no"
        Value="[APPLICATIONFOLDER]resources\resources\linux\docker-cli-plugins\" />
    </Component>


    <!-- Add Admin install registry element -->
    <Component Id="AdminInstallRegistry" Directory="APPLICATIONFOLDER" Guid="752E8274-9706-4B97-8533-1E7C5080320A">
      <Condition>
      <![CDATA[MSIINSTALLPERUSER <> 1]]>
      </Condition>
      <RegistryValue
        Root="HKLM"
        Key='SOFTWARE\SUSE\RancherDesktop'
        Name="AdminInstall"
        Value="true"
        Type="string"
        KeyPath="yes"
      />
    </Component>

    <!-- Add FirewallException element -->
    <Component Id="AdminInstallFirewall" Directory="APPLICATIONFOLDER" Guid="B03D3C75-F835-47A9-8224-1D1238B4F74F" KeyPath="yes">
      <Condition>
      <![CDATA[MSIINSTALLPERUSER <> 1]]>
      </Condition>
      <fire:FirewallException
        Id="HostSwitchFirewallPrivateException"
        Name="Rancher Desktop Networking Private Exception"
        Description="Rancher Desktop host-switch.exe profile exception for private networks"
        Program="[APPLICATIONFOLDER]resources\resources\win32\internal\host-switch.exe"
        Profile="private"
        Scope="any"
        Protocol="tcp" />
      <fire:FirewallException
        Id="HostSwitchFirewallDomainException"
        Name="Rancher Desktop Networking Domain Exception"
        Description="Rancher Desktop host-switch.exe profile exception for domain networks"
        Program="[APPLICATIONFOLDER]resources\resources\win32\internal\host-switch.exe"
        Profile="domain"
        Scope="any"
        Protocol="tcp" />
    </Component>

    <!-- If required, run the app after install (for updates) -->
    <Property Id="RDRUNAFTERINSTALL" Secure="yes" />
    <CustomAction
      Id="RunApplication"
      FileKey="mainExecutable"
      ExeCommand=""
      Execute="commit"
      Impersonate="yes"
      Return="asyncNoWait"
    />
    <InstallExecuteSequence>
      <Custom Action="RunApplication" Before="InstallFinalize">
        RDRUNAFTERINSTALL
      </Custom>
    </InstallExecuteSequence>

    <Feature Id="ProductFeature" Absent="disallow">
      <ComponentGroupRef Id="ProductComponents" />
      <ComponentRef Id="PathUser" />
      <ComponentRef Id="PathSystem" />
      <ComponentRef Id="AdminInstallRegistry" />
      <ComponentRef Id="AdminInstallFirewall" />
    </Feature>
  </Product>
  {{ &fileList }}
</Wix>
